#include <stdio.h>

bool isFindXtml = 0;

int Skin_length = 0;

/*
void ChageSoso(int soso_Offset1,int soso_Offset2)
{
	int state = GetPrivateProfileInt(L"插件管理",L"Com.Tencent.Soso", 1, tzIniPath);
	if(state==0)
	{
		Skin_buffer[soso_Offset1] = 0x4B;
		Skin_buffer[soso_Offset2] = 0xF7;
	}
}
*/
void SkinsPatch(BYTE* buffer)
{
	int len = Skin_length;
	//DbgPrint(L"%X",len);
	//
	//
	/*
	BYTE key1[] = {0x09, 0x1C, 0x00, 0x80, 0xE3, 0x8F, 0xE3, 0x8A, 0xE3, 0x86, 0xE3, 0x8D, 0xE3, 0x97, 0xE3, 0xA2, 0xE3, 0x91, 0xE3, 0x86, 0xE3, 0x82, 0xE3, 0xB0, 0xE3, 0x8A, 0xE3, 0x99, 0xE3, 0x86, 0xE3, 0x08, 0x00, 0x00, 0x00, 0xF8, 0xF5, 0xF7, 0xF7, 0xEA, 0xF6, 0xF7, 0xF7};
	long FingerFrame1 = memstr(key1,sizeof(key1),buffer,len);
	if(FingerFrame1!=-1)
	{
	 	//DbgPrint(L"FingerFrame1");
		buffer[FingerFrame1+35] = 0x7D;
		buffer[FingerFrame1+36] = 0xF6;
		
		BYTE key2[] = {0x07, 0x10, 0x00, 0x89, 0xEF, 0x86, 0xEF, 0x83, 0xEF, 0x83, 0xEF, 0xA6, 0xEF, 0x9B, 0xEF, 0x8A, 0xEF, 0x82, 0xEF, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};
		int offset = FingerFrame1 + sizeof(key1);
		long FingerFrame2 = memstr(key2,sizeof(key2),buffer + offset,0x1000);
		if(FingerFrame2!=-1)
		{
			buffer[offset+FingerFrame2+23] = 0x00;
			//DbgPrint(L"%X %X",FingerFrame2,offset+FingerFrame2+23);
		}
		
	}
	*/
	
	/*
	BYTE key3[] = {0x08, 0x0C, 0x00, 0x90, 0xF3, 0x9C, 0xF3, 0x9D, 0xF3, 0x95, 0xF3, 0x9A, 0xF3, 0x94, 0xF3, 0x20, 0x00, 0x00, 0x00, 0x93, 0xDF, 0xB0, 0xDF, 0xBC, 0xDF, 0xB4, 0xDF, 0x8F, 0xDF, 0xBE, 0xDF, 0xB1, 0xDF, 0xBA, 0xDF, 0xB3, 0xDF, 0x80, 0xDF, 0xA8, 0xDF, 0xB6, 0xDF, 0xB1, 0xDF, 0xBB, 0xDF, 0xB0, 0xDF, 0xA8, 0xDF, 0x09, 0x1C, 0x00, 0x80, 0xE3, 0x8F, 0xE3, 0x8A, 0xE3, 0x86, 0xE3, 0x8D, 0xE3, 0x97, 0xE3, 0xA2, 0xE3, 0x91, 0xE3, 0x86, 0xE3, 0x82, 0xE3, 0xB0, 0xE3, 0x8A, 0xE3, 0x99, 0xE3, 0x86, 0xE3, 0x08, 0x00, 0x00, 0x00, 0xDD, 0xF6, 0xF7, 0xF7, 0xC9, 0xF5, 0xF7, 0xF7, 0x09, 0x0E, 0x00, 0x9C, 0xF1, 0x98, 0xF1, 0x9F, 0xF1, 0xA2, 0xF1, 0x98, 0xF1, 0x8B, 0xF1, 0x94, 0xF1, 0x08, 0x00, 0x00, 0x00, 0xDE, 0xF6, 0xF7, 0xF7, 0x80, 0xF6};
	long lockpanel = memstr(key3,sizeof(key3),buffer,len);
	if(lockpanel!=-1)
	{
	 	//DbgPrint(L"lockpanel");
		//DbgPrint(L"%X %X",lockpanel,buffer[lockpanel+35+51]);
		buffer[lockpanel+35+51] = 0x0D;
		buffer[lockpanel+36+51] = 0xF7;
		buffer[lockpanel+64+51] = 0x0D;
		buffer[lockpanel+65+51] = 0xF7;
		//DbgPrint(L"%X %X",lockpanel,buffer[lockpanel+64]);
	}
	BYTE key4[] = {0x08, 0x0C, 0x00, 0x90, 0xF3, 0x9C, 0xF3, 0x9D, 0xF3, 0x95, 0xF3, 0x9A, 0xF3, 0x94, 0xF3, 0x28, 0x00, 0x00, 0x00, 0x84, 0xD7, 0xA3, 0xD7, 0xB3, 0xD7, 0x9B, 0xD7, 0xB8, 0xD7, 0xB0, 0xD7, 0xBE, 0xD7, 0xB9, 0xD7, 0x87, 0xD7, 0xB6, 0xD7, 0xB9, 0xD7, 0xB2, 0xD7, 0xBB, 0xD7, 0x88, 0xD7, 0xA0, 0xD7, 0xBE, 0xD7, 0xB9, 0xD7, 0xB3, 0xD7, 0xB8, 0xD7, 0xA0, 0xD7, 0x09, 0x1C, 0x00, 0x80, 0xE3, 0x8F, 0xE3, 0x8A, 0xE3, 0x86, 0xE3, 0x8D, 0xE3, 0x97, 0xE3, 0xA2, 0xE3, 0x91, 0xE3, 0x86, 0xE3, 0x82, 0xE3, 0xB0, 0xE3, 0x8A, 0xE3, 0x99, 0xE3, 0x86, 0xE3, 0x08, 0x00, 0x00, 0x00, 0xDD, 0xF6, 0xF7, 0xF7, 0xC9, 0xF5, 0xF7, 0xF7, 0x09, 0x0E, 0x00, 0x9C, 0xF1, 0x98, 0xF1, 0x9F, 0xF1, 0xA2, 0xF1, 0x98, 0xF1, 0x8B, 0xF1, 0x94, 0xF1, 0x08, 0x00, 0x00, 0x00, 0xDE, 0xF6, 0xF7, 0xF7, 0x80, 0xF6};
	long StdLoginPanel = memstr(key4,sizeof(key4),buffer,len);
	if(StdLoginPanel!=-1)
	{
	 	//DbgPrint(L"StdLoginPanel");
		//DbgPrint(L"%X %X",StdLoginPanel,buffer[StdLoginPanel+35+59]);
		
		buffer[StdLoginPanel+35+59] = 0x0D;
		buffer[StdLoginPanel+36+59] = 0xF7;
		buffer[StdLoginPanel+64+59] = 0x0D;
		buffer[StdLoginPanel+65+59] = 0xF7;
		
		//DbgPrint(L"%X %X",lockpanel,buffer[lockpanel+64]);
	}
	*/

	//QQ2012面板宽度
	//minSize="295,540"//291,542
	BYTE QQ2012[] = {0x09, 0x0E, 0x00, 0x9C, 0xF1, 0x98, 0xF1, 0x9F, 0xF1, 0xA2, 0xF1, 0x98, 0xF1, 0x8B, 0xF1, 0x94, 0xF1, 0x08, 0x00, 0x00, 0x00, 0xD0, 0xF6, 0xF7, 0xF7, 0xEB, 0xF5, 0xF7, 0xF7};
	long startset = 0;
	for(int i=0;i<3;i++)
	{
		long minSize = memstr(QQ2012,sizeof(QQ2012),buffer + startset,len - startset);
		if(minSize!=-1)
		{
			buffer[minSize+startset+21] = 0x0D;
			buffer[minSize+startset+22] = 0xF7;

			buffer[minSize+startset+25] = 0x2C;
			buffer[minSize+startset+26] = 0xF6;

			startset += minSize + sizeof(QQ2012);
		}
		else break;
	}
	
	/*
	//帮助按钮
	if(!ShowHelpBtn)
	{	
		BYTE key5[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x14, 0x00, 0x00, 0x00, 0xAC, 0xEB, 0x8E, 0xEB, 0x9F, 0xEB, 0xA3, 0xEB, 0x8E, 0xEB, 0x87, 0xEB, 0x9B, 0xEB, 0xA9, 0xEB, 0x9F, 0xEB, 0x85, 0xEB, 0x08, 0x0C, 0x00, 0x92, 0xF3, 0x9D, 0xF3, 0x90, 0xF3, 0x9B, 0xF3, 0x9C, 0xF3, 0x81, 0xF3, 0x10, 0x00, 0x00, 0x00, 0xBB, 0xEF, 0xA0, 0xEF, 0xBF, 0xEF, 0xBD, 0xEF, 0xA6, 0xEF, 0xA8, 0xEF, 0xA7, 0xEF, 0xBB, 0xEF, 0x09, 0x08, 0x00, 0x84, 0xF7, 0x9E, 0xF7, 0x8D, 0xF7, 0x92, 0xF7, 0x08, 0x00, 0x00, 0x00, 0xE1, 0xF7, 0xF7, 0xF7, 0xE5, 0xF7, 0xF7, 0xF7};
		long GetHelpBtn = memstr(key5,sizeof(key5),buffer,len);
		if(GetHelpBtn!=-1)
		{
		 	//DbgPrint(L"GetHelpBtn");
			//DbgPrint(L"%X %X",GetHelpBtn,buffer[GetHelpBtn+89]);
			buffer[GetHelpBtn+85] = 0xF7;
			buffer[GetHelpBtn+89] = 0xF7;
		}
		BYTE key9[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x28, 0x00, 0x00, 0x00, 0x95, 0xD7, 0xA3, 0xD7, 0xB9, 0xD7, 0x88, 0xD7, 0x94, 0xD7, 0xB8, 0xD7, 0xB9, 0xD7, 0xB1, 0xD7, 0xBE, 0xD7, 0xB0, 0xD7, 0x94, 0xD7, 0xB2, 0xD7, 0xB9, 0xD7, 0xA3, 0xD7, 0xB2, 0xD7, 0xA5, 0xD7, 0x9F, 0xD7, 0xB2, 0xD7, 0xBB, 0xD7, 0xA7, 0xD7, 0x09};
		long Btn_ConfigCenterHelp = memstr(key9,sizeof(key9),buffer,len);
		if(Btn_ConfigCenterHelp!=-1)
		{
			BYTE key10[] = {0x08, 0x00, 0x84, 0xF7, 0x9E, 0xF7, 0x8D, 0xF7, 0x92, 0xF7, 0x08, 0x00, 0x00, 0x00, 0xE1, 0xF7, 0xF7, 0xF7, 0xE5, 0xF7, 0xF7, 0xF7};
			int offset = Btn_ConfigCenterHelp + sizeof(key9);
			Btn_ConfigCenterHelp = memstr(key10,sizeof(key10),buffer+offset,len-offset);
			if(Btn_ConfigCenterHelp!=-1)
			{
				//DbgPrint(L"Btn_ConfigCenterHelp %X",);
				//buffer[Btn_ConfigCenterHelp] = 0x0F;
				buffer[Btn_ConfigCenterHelp+14+offset] = 0xF7;
				buffer[Btn_ConfigCenterHelp+18+offset] = 0xF7;

			}
		}
	}
	*/

	/*
	BYTE key6[] = {0x08, 0x0C, 0x00, 0x90, 0xF3, 0x9C, 0xF3, 0x9D, 0xF3, 0x95, 0xF3, 0x9A, 0xF3, 0x94, 0xF3, 0x2C, 0x00, 0x00, 0x00, 0xA7, 0xD3, 0xB2, 0xD3, 0xB1, 0xD3, 0xB0, 0xD3, 0xA7, 0xD3, 0xA1, 0xD3, 0xBF, 0xD3, 0x8C, 0xD3, 0xA0, 0xD3, 0xBB, 0xD3, 0xBC, 0xD3, 0xA4, 0xD3, 0xB0, 0xD3, 0xA6, 0xD3, 0xA0, 0xD3, 0xA7, 0xD3, 0xBC, 0xD3, 0xBE, 0xD3, 0xB5, 0xD3, 0xB2, 0xD3, 0xB0, 0xD3, 0xB6, 0xD3, 0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x18, 0x00, 0x00, 0x00, 0x93, 0xE7, 0x86, 0xE7, 0x85, 0xE7, 0xA1, 0xE7, 0x86, 0xE7, 0x84, 0xE7, 0x82, 0xE7, 0xA0, 0xE7, 0x95, 0xE7, 0x88, 0xE7, 0x92, 0xE7, 0x97, 0xE7, 0x09, 0x10, 0x00, 0x83, 0xEF, 0x80, 0xEF, 0x8C, 0xEF, 0x8E, 0xEF, 0x9B, 0xEF, 0x86, 0xEF, 0x80, 0xEF, 0x81, 0xEF, 0x08, 0x00, 0x00, 0x00, 0xF7, 0xF7, 0xF7, 0xF7, 0xF6, 0xF7, 0xF7, 0xF7, 0x09, 0x08, 0x00, 0x84, 0xF7, 0x9E, 0xF7, 0x8D, 0xF7, 0x92, 0xF7, 0x08, 0x00, 0x00, 0x00, 0xE1, 0xF6, 0xF7, 0xF7, 0xE1, 0xF7, 0xF7, 0xF7};
	long tabFaceGroup = memstr(key6,sizeof(key6),buffer,len);
	if(tabFaceGroup!=-1)
	{
	 	//DbgPrint(L"tabFaceGroup");
		BYTE key7[] = {0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x1E, 0x00, 0x00, 0x00, 0xB2, 0xE1, 0x8E, 0xE1, 0xB2, 0xE1, 0x8E, 0xE1, 0xA7, 0xE1, 0x80, 0xE1, 0x82, 0xE1, 0x84, 0xE1, 0xB2, 0xE1, 0x84, 0xE1, 0x80, 0xE1, 0x93, 0xE1, 0xA3, 0xE1, 0x80, 0xE1, 0x93, 0xE1, 0x09, 0x10, 0x00, 0x83, 0xEF, 0x80, 0xEF, 0x8C, 0xEF, 0x8E, 0xEF, 0x9B, 0xEF, 0x86, 0xEF, 0x80, 0xEF, 0x81, 0xEF, 0x08, 0x00, 0x00, 0x00, 0xEF, 0xF6, 0xF7, 0xF7, 0xF6, 0xF7, 0xF7, 0xF7, 0x09, 0x08, 0x00, 0x84, 0xF7, 0x9E, 0xF7, 0x8D, 0xF7, 0x92, 0xF7, 0x08, 0x00, 0x00, 0x00, 0x5F, 0xF7, 0xF7, 0xF7, 0xE0, 0xF7, 0xF7, 0xF7};
		int offset = tabFaceGroup + sizeof(key6);
		long SoSoFaceSearBar = memstr(key7,sizeof(key7),buffer + offset,len-offset);
		if(SoSoFaceSearBar!=-1)
		{
			ChageSoso(tabFaceGroup+148,offset + SoSoFaceSearBar + 90);
		}
	}
	*/
	
	if(!ShowFaceBtn)
	{
		BYTE key8[] = {0x08, 0x06, 0x00, 0x90, 0xF9, 0x90, 0xF9, 0x9D, 0xF9, 0x48, 0x00, 0x00, 0x00, 0x87, 0xB7, 0x83, 0xB7, 0x8F, 0xB7, 0x83, 0xB7, 0x8E, 0xB7, 0x80, 0xB7, 0x8F, 0xB7, 0xF5, 0xB7, 0x9A, 0xB7, 0xF3, 0xB7, 0x87, 0xB7, 0x86, 0xB7, 0x87, 0xB7, 0x9A, 0xB7, 0x83, 0xB7, 0xF2, 0xB7, 0xF2, 0xB7, 0x8F, 0xB7, 0x9A, 0xB7, 0xF6, 0xB7, 0xF5, 0xB7, 0xF4, 0xB7, 0x86, 0xB7, 0x9A, 0xB7, 0xF6, 0xB7, 0xF5, 0xB7, 0x87, 0xB7, 0x80, 0xB7, 0xF2, 0xB7, 0x87, 0xB7, 0x84, 0xB7, 0xF3, 0xB7, 0x85, 0xB7, 0x8F, 0xB7, 0x84, 0xB7, 0x82, 0xB7};
		long richface = memstr(key8,sizeof(key8),buffer,len);
		if(richface!=-1)
		{
		 	//DbgPrint(L"richface");
			int offset = richface + sizeof(key8);
			richface = memstr(key8,sizeof(key8),buffer+offset,len-offset);
			if(richface!=-1)
			{
				offset = richface+offset+251;
				//DbgPrint(L"%X",buffer[offset]);
				if(buffer[offset]==0x08) buffer[offset] = 0x0F;
				//DbgPrint(L"%X",buffer[offset]);
			}
		}
	}
	//DbgPrint(L"%X %X,%X %X",soso_Offset1,soso_Offset2,buffer[soso_Offset1],buffer[soso_Offset2]);
	//ChageSoso(0);
	if(!ShowSafeEntry)
	{
		BYTE key[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x1E, 0x00, 0x00, 0x00, 0xAC, 0xE1, 0x80, 0xE1, 0x88, 0xE1, 0x8F, 0xE1, 0xB5, 0xE1, 0x8E, 0xE1, 0x8E, 0xE1, 0x8D, 0xE1, 0xA4, 0xE1, 0x99, 0xE1, 0x95, 0xE1, 0xA0, 0xE1, 0x93, 0xE1, 0x84, 0xE1, 0x80, 0xE1, 0x01, 0x12};
		long MainToolExtArea = memstr(key,sizeof(key),buffer,len);
		if(MainToolExtArea!=-1)
		{
			//DbgPrint(L"%X",buffer[MainToolExtArea]);
			buffer[MainToolExtArea] = 0x0F;
		}

		BYTE key2[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x24, 0x00, 0x00, 0x00, 0x96, 0xDB, 0xBE, 0xDB, 0xB5, 0xDB, 0xAE, 0xDB, 0x84, 0xDB, 0x88, 0xDB, 0xBE, 0xDB, 0xB8, 0xDB, 0xA9, 0xDB, 0xB2, 0xDB, 0xAF, 0xDB, 0xA2, 0xDB, 0x98, 0xDB, 0xBE, 0xDB, 0xB5, 0xDB, 0xAF, 0xDB, 0xBE, 0xDB, 0xA9, 0xDB, 0x08, 0x10};
		long Menu_SecrityCenter = memstr(key2,sizeof(key2),buffer,len);
		if(Menu_SecrityCenter!=-1)
		{
			if(buffer[Menu_SecrityCenter-156]==0x82 && buffer[Menu_SecrityCenter-155]==0xB7)
			{
				buffer[Menu_SecrityCenter-156] = 0x81;
			}
			//buffer[Menu_SecrityCenter-84] = 0x0F;
			//DbgPrint(L"%X",buffer[Menu_SecrityCenter]);
		}
		BYTE key3[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x20, 0x00, 0x00, 0x00, 0x92, 0xDF, 0xBA, 0xDF, 0xB1, 0xDF, 0xAA, 0xDF, 0x80, 0xDF, 0x9E, 0xDF, 0x93, 0xDF, 0x93, 0xDF, 0x8C, 0xDF, 0xBA, 0xDF, 0xAD, 0xDF, 0xA9, 0xDF, 0xB6, 0xDF, 0xBC, 0xDF, 0xBA, 0xDF, 0xAC, 0xDF, 0x08, 0x10};
		long Menu_ALLServices = memstr(key3,sizeof(key3),buffer,len);
		if(Menu_ALLServices!=-1)
		{
			if(buffer[Menu_ALLServices-156+4]==0x82 && buffer[Menu_ALLServices-155+4]==0xB7)
			{
				buffer[Menu_ALLServices-156+4] = 0x81;
			}
		}

	}
	if(!ShowLevelBtn)
	{
		/*
		BYTE key1[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x18, 0x00, 0x00, 0x00, 0xB6, 0xE7, 0xB6, 0xE7, 0xAB, 0xE7, 0x82, 0xE7, 0x91, 0xE7, 0x82, 0xE7, 0x8B, 0xE7, 0xA1, 0xE7, 0x95, 0xE7, 0x86, 0xE7, 0x8A, 0xE7, 0x82, 0xE7, 0x09, 0x10, 0x00, 0x83, 0xEF, 0x80, 0xEF, 0x8C, 0xEF, 0x8E, 0xEF, 0x9B, 0xEF, 0x86, 0xEF, 0x80, 0xEF, 0x81, 0xEF, 0x08, 0x00, 0x00, 0x00, 0xBC, 0xF7, 0xF7, 0xF7, 0xF2, 0xF7, 0xF7, 0xF7};
		long QQLevelFrame = memstr(key1,sizeof(key1),buffer,len);
		if(QQLevelFrame!=-1)
		{
			buffer[QQLevelFrame+85] = 0xF7;
			buffer[QQLevelFrame+89] = 0xF7;
			buffer[QQLevelFrame+188] = 0xEF;
		}
		*/

		BYTE key2[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x18, 0x00, 0x00, 0x00, 0xB6, 0xE7, 0xB6, 0xE7, 0xAB, 0xE7, 0x82, 0xE7, 0x91, 0xE7, 0x82, 0xE7, 0x8B, 0xE7, 0xB7, 0xE7, 0x86, 0xE7, 0x89, 0xE7, 0x82, 0xE7, 0x8B, 0xE7, 0x0B, 0x14, 0x00, 0x9B, 0xEB, 0x99, 0xEB, 0x84, 0xEB, 0x9B, 0xEB, 0x8E, 0xEB, 0x99, 0xEB, 0x9F, 0xEB, 0x82, 0xEB, 0x8E, 0xEB, 0x98, 0xEB};//, 0xD9, 0x00, 0x00, 0x00, 0x54, 0x44, 0x01, 0x01, 0x07, 0x00, 0x09, 0x08, 0x00, 0x84, 0xF7, 0x9E, 0xF7, 0x8D, 0xF7, 0x92, 0xF7, 0x08, 0x00, 0x00, 0x00, 0xC5, 0xF7, 0xF7, 0xF7, 0xE1, 0xF7, 0xF7, 0xF7};
		long QQLevelFrame = memstr(key2,sizeof(key2),buffer,len);
		if(QQLevelFrame!=-1)
		{
			buffer[QQLevelFrame+87] = 0xF7;
			buffer[QQLevelFrame+91] = 0xF7;

			if(buffer[QQLevelFrame-798]==0) buffer[QQLevelFrame-798] = 0x01;
		}
	}
	
	/*
	if(ShowAddBtn)
	{
		BYTE key[] = {0x08, 0x10, 0x00, 0x9D, 0xEF, 0x8A, 0xEF, 0x9F, 0xEF, 0x80, 0xEF, 0x9D, 0xEF, 0x9B, 0xEF, 0xA6, 0xEF, 0x8B, 0xEF, 0x48, 0x00, 0x00, 0x00, 0xD6, 0xB7, 0xD6, 0xB7, 0x8F, 0xB7, 0xD6, 0xB7, 0x83, 0xB7, 0x81, 0xB7, 0xD1, 0xB7, 0x8E, 0xB7, 0x9A, 0xB7, 0x84, 0xB7, 0xD4, 0xB7, 0xD3, 0xB7, 0xD6, 0xB7, 0x9A, 0xB7, 0x83, 0xB7, 0x87, 0xB7, 0x86, 0xB7, 0x84, 0xB7, 0x9A, 0xB7, 0x8F, 0xB7, 0xD4, 0xB7, 0xD2, 0xB7, 0x8F, 0xB7, 0x9A, 0xB7, 0x84, 0xB7, 0xD2, 0xB7, 0xD2, 0xB7, 0x80, 0xB7, 0x80, 0xB7, 0x83, 0xB7, 0xD6, 0xB7, 0x85, 0xB7, 0xD1, 0xB7, 0x81, 0xB7, 0x84, 0xB7, 0x81, 0xB7, 0x08, 0x0C};
		long aio_toobar_add = memstr(key,sizeof(key),buffer,len);
		if(aio_toobar_add!=-1)
		{
			//DbgPrint(L"%X",buffer[aio_toobar_add+95]);
			buffer[aio_toobar_add+95] = 0x0F;
		}

		BYTE key2[] = {0x08, 0x10, 0x00, 0x9D, 0xEF, 0x8A, 0xEF, 0x9F, 0xEF, 0x80, 0xEF, 0x9D, 0xEF, 0x9B, 0xEF, 0xA6, 0xEF, 0x8B, 0xEF, 0x48, 0x00, 0x00, 0x00, 0xF4, 0xB7, 0x84, 0xB7, 0xF1, 0xB7, 0x82, 0xB7, 0x82, 0xB7, 0x81, 0xB7, 0xF2, 0xB7, 0x80, 0xB7, 0x9A, 0xB7, 0x8F, 0xB7, 0x83, 0xB7, 0x82, 0xB7, 0xF1, 0xB7, 0x9A, 0xB7, 0x83, 0xB7, 0xF5, 0xB7, 0xF6, 0xB7, 0x85, 0xB7, 0x9A, 0xB7, 0x8E, 0xB7, 0xF3, 0xB7, 0xF6, 0xB7, 0xF3, 0xB7, 0x9A, 0xB7, 0xF2, 0xB7, 0x8F, 0xB7, 0x83, 0xB7, 0x86, 0xB7, 0xF3, 0xB7, 0x8F, 0xB7, 0x8E, 0xB7, 0xF6, 0xB7, 0xF1, 0xB7, 0x8F, 0xB7, 0xF2, 0xB7, 0xF1, 0xB7, 0x08, 0x0C};
		long aio_toobar_Report = memstr(key2,sizeof(key2),buffer,len);
		if(aio_toobar_Report!=-1)
		{
			//DbgPrint(L"%X",buffer[aio_toobar_Report+95]);
			buffer[aio_toobar_Report+95] = 0x0F;
		}
	}
	*/

	if(!ShowUpdateEntry)
	{
		//DbgPrint(L"禁用升级");
		BYTE key[] = {0x08, 0x08, 0x00, 0x99, 0xF7, 0x96, 0xF7, 0x9A, 0xF7, 0x92, 0xF7, 0x1E, 0x00, 0x00, 0x00, 0xAC, 0xE1, 0x84, 0xE1, 0x8F, 0xE1, 0x94, 0xE1, 0xBE, 0xE1, 0xB4, 0xE1, 0x91, 0xE1, 0x85, 0xE1, 0x80, 0xE1, 0x95, 0xE1, 0x84, 0xE1, 0xA9, 0xE1, 0x88, 0xE1, 0x8F, 0xE1, 0x95, 0xE1, 0x08, 0x08, 0x00, 0x83, 0xF7, 0x92, 0xF7, 0x8F, 0xF7, 0x83, 0xF7, 0x3A, 0x00, 0x00, 0x00, 0xE1, 0xC5, 0xB5, 0xC5, 0xA9, 0xC5, 0xA4, 0xC5, 0xB1, 0xC5, 0xA3, 0xC5, 0xAA, 0xC5, 0xB7, 0xC5, 0xA8, 0xC5, 0xFF, 0xC5, 0x88, 0xC5, 0x84, 0xC5, 0x8C, 0xC5, 0x8B, 0xC5, 0x88, 0xC5, 0x80, 0xC5, 0x8B, 0xC5, 0x90, 0xC5, 0x9A, 0xC5, 0x90, 0xC5, 0xB5, 0xC5, 0xA1, 0xC5, 0xA4, 0xC5, 0xB1, 0xC5, 0xA0, 0xC5, 0x8D, 0xC5, 0xAC, 0xC5, 0xAB, 0xC5, 0xB1, 0xC5, 0x08, 0x0C};
		long Menu_UpdateHint = memstr(key,sizeof(key),buffer,len);
		if(Menu_UpdateHint!=-1)
		{
			//DbgPrint(L"%X",buffer[Menu_UpdateHint-149]);
			//buffer[aio_toobar_add+95] = 0x0F;
			if(buffer[Menu_UpdateHint-150]==0x82 && buffer[Menu_UpdateHint-149]==0xB7)
			{
				buffer[Menu_UpdateHint-150] = 0x81;
				//DbgPrint(L"菜单修改完成");
			}
		}
	}
}

/*
typedef LPVOID (WINAPI*  MYMapViewOfFile)(
	__in HANDLE hFileMappingObject, 
	__in DWORD dwDesiredAccess, 
	__in DWORD dwFileOffsetHigh, 
	__in DWORD dwFileOffsetLow, 
	__in SIZE_T dwNumberOfBytesToMap 
	);
MYMapViewOfFile OldMapViewOfFile = NULL;
LPVOID  WINAPI MyMapViewOfFile(
							   __in HANDLE hFileMappingObject, 
							   __in DWORD dwDesiredAccess, 
							   __in DWORD dwFileOffsetHigh, 
							   __in DWORD dwFileOffsetLow, 
							   __in SIZE_T dwNumberOfBytesToMap 
							   )
{
	if(Skin_hMapFile && Skin_hMapFile==hFileMappingObject)
	{
		//DbgPrint(L"%X",hFileMappingObject);
		Skin_hMapFile = NULL;
		LPVOID MapData;
		if(OldMapViewOfFile) MapData = OldMapViewOfFile(hFileMappingObject,FILE_MAP_COPY,dwFileOffsetHigh,dwFileOffsetLow,dwNumberOfBytesToMap);
		if(MapData)
		{
			SkinsPatch((BYTE*)MapData);
			//SkinsPatch((BYTE*)MapData,Skin_length);
			//CloseHandle(hMapFile);
			//UnmapViewOfFile(MapData);
		}
		//HookEngine.Uninstallhook(OldMapViewOfFile);
		return MapData;
	}
	if(OldMapViewOfFile) return OldMapViewOfFile(hFileMappingObject,dwDesiredAccess,dwFileOffsetHigh,dwFileOffsetLow,dwNumberOfBytesToMap);
	return 0;
}
typedef HANDLE (WINAPI*  MYCreateFileMapping)(
	HANDLE hFile, //物理文件句柄 
	LPSECURITY_ATTRIBUTES lpAttributes, //安全设置 
	DWORD flProtect, //保护设置 
	DWORD dwMaximumSizeHigh, //高位文件大小 
	DWORD dwMaximumSizeLow, //低位文件大小 
	LPCTSTR lpName //共享内存名称 
	);

MYCreateFileMapping OldCreateFileMapping = NULL;

HANDLE WINAPI MyCreateFileMapping(
								  HANDLE hFile, //物理文件句柄 
								  LPSECURITY_ATTRIBUTES lpAttributes, //安全设置 
								  DWORD flProtect, //保护设置 
								  DWORD dwMaximumSizeHigh, //高位文件大小 
								  DWORD dwMaximumSizeLow, //低位文件大小 
								  LPCTSTR lpName //共享内存名称 
								  )
{
	if(Skin_hFile && Skin_hFile==hFile)
	{
		OutputDebugStringW(L"MyCreateFileMapping");
		//DbgPrint(L"%X",Skin_hFile);
		Skin_hFile = 0;
		if(OldCreateFileMapping) Skin_hMapFile = OldCreateFileMapping(hFile,lpAttributes,PAGE_WRITECOPY,dwMaximumSizeHigh,dwMaximumSizeLow,lpName);
		//HookEngine.Uninstallhook(OldCreateFileMapping);
		return Skin_hMapFile;
	}

	if(OldCreateFileMapping) return OldCreateFileMapping(hFile,lpAttributes,flProtect,dwMaximumSizeHigh,dwMaximumSizeLow,lpName);
	return 0;
}
*/
typedef HANDLE (WINAPI*  MYCreateFile)(
									   LPCTSTR lpFileName, //指向文件名的指针 
									   DWORD dwDesiredAccess, //访问模式（写/读） 
									   DWORD dwShareMode, //共享模式 
									   LPSECURITY_ATTRIBUTES lpSecurityAttributes, //指向安全属性的指针 
									   DWORD dwCreationDisposition, //如何创建 
									   DWORD dwFlagsAndAttributes, //文件属性 
									   HANDLE hTemplateFile //用于复制文件句柄 
									   );

MYCreateFile OldCreateFile= NULL;

HANDLE WINAPI MyCreateFile(
						   LPCTSTR lpFileName, //指向文件名的指针 
						   DWORD dwDesiredAccess, //访问模式（写/读） 
						   DWORD dwShareMode, //共享模式 
						   LPSECURITY_ATTRIBUTES lpSecurityAttributes, //指向安全属性的指针 
						   DWORD dwCreationDisposition, //如何创建 
						   DWORD dwFlagsAndAttributes, //文件属性 
						   HANDLE hTemplateFile //用于复制文件句柄 
						   )
{
	HANDLE hFile = INVALID_HANDLE_VALUE;
	if(OldCreateFile) hFile = OldCreateFile(lpFileName,dwDesiredAccess,dwShareMode,lpSecurityAttributes,dwCreationDisposition,dwFlagsAndAttributes,hTemplateFile);
	if(OldCreateFile && !isFindXtml && isEndWith(lpFileName,L".rdb") && wcsstr(lpFileName,L"Xtml") )
	{
		isFindXtml = true;

		Skin_length = GetFileSize(hFile,NULL);

		TCHAR TempRDB[MAX_PATH + 1];
		GetTempPath(MAX_PATH, TempRDB);
		wcscat(TempRDB,L"CWUB3_");

		wchar_t *temp_FileName = _wcsdup(lpFileName);
		wchar_t *pos = (wchar_t *)wcsrchr(temp_FileName,'\\');
		if( pos ) *(pos-1) = 0;
		pos = (wchar_t *)wcsrchr(temp_FileName,'\\');
		if( pos ) wcscat(TempRDB,pos+1);
		free(temp_FileName);
		wcscat(TempRDB,L"_Xtml");

		HANDLE rdb_file = OldCreateFile(TempRDB,dwDesiredAccess,dwShareMode,lpSecurityAttributes,dwCreationDisposition,dwFlagsAndAttributes,hTemplateFile);

		if (rdb_file == INVALID_HANDLE_VALUE || need_update_rdb)
		{
			CloseHandle(rdb_file);
			//生成
			if( pos )
			{
				BYTE *rdb_buffer = (BYTE *)malloc(Skin_length);
				DWORD readsize;
				ReadFile(hFile,rdb_buffer,Skin_length,&readsize,NULL);
				SkinsPatch(rdb_buffer);

				FILE *temp_rdb_file = _wfopen(TempRDB, L"wb");
				if(temp_rdb_file)
				{
					fwrite(rdb_buffer,Skin_length,1,temp_rdb_file);
					fclose(temp_rdb_file);

					CloseHandle(hFile);
					hFile = OldCreateFile(TempRDB,dwDesiredAccess,dwShareMode,lpSecurityAttributes,dwCreationDisposition,dwFlagsAndAttributes,hTemplateFile);

					TCHAR AppData[MAX_PATH+1];
					SHGetSpecialFolderPath(NULL, AppData, CSIDL_APPDATA, FALSE);
					wcscat(AppData,L"\\Tencent\\QQ\\rdo.cache");

					DeleteFile(AppData);
				}
				free(rdb_buffer);
			}
		}
		else
		{
			//已经存在
			CloseHandle(hFile);
			hFile = rdb_file;
		}
		HookEngine.Uninstallhook(OldCreateFile);
	}
	
	return hFile;
}



